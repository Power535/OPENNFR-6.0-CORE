From f9efc3cda16ca9b9e2e0eab0341d6b93a7c29323 Mon Sep 17 00:00:00 2001
From: Taejong Yoo <yoo.taejong@gmail.com>
Date: Tue, 20 Dec 2016 14:58:21 +0900
Subject: [PATCH 1/3] Jarvis 16.1 V3D support

---
 configure.ac                             |  59 +++++++++--
 m4/xbmc_arch.m4                          |   3 +
 system/playercorefactory.xml             |  12 +++
 tools/Linux/kodi.sh.in                   |  38 ++++++--
 tools/depends/target/ffmpeg/autobuild.sh |  14 +++
 xbmc/GUIInfoManager.cpp                  |   4 +
 xbmc/input/InputManager.cpp              |  12 +++
 xbmc/input/linux/LinuxInputDevices.cpp   |  33 ++++++-
 xbmc/utils/CPUInfo.cpp                   |  33 +++++++
 xbmc/windowing/egl/EGLNativeTypeV3D.cpp  | 161 +++++++++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeV3D.h    |  59 +++++++++++
 xbmc/windowing/egl/EGLWrapper.cpp        |   6 ++
 xbmc/windowing/egl/Makefile.in           |   3 +
 xbmc/xbmc.cpp                            |   9 ++
 14 files changed, 428 insertions(+), 18 deletions(-)
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3D.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3D.h

diff --git a/configure.ac b/configure.ac
index 5d47a4a..4237a34 100644
--- a/configure.ac
+++ b/configure.ac
@@ -709,6 +709,24 @@ case $use_platform in
      CFLAGS="$CFLAGS"
      CXXFLAGS="$CXXFLAGS"
      ;;
+  v3d)
+     target_platform=target_v3d
+     ARCH="mips"
+     use_arch="mips"
+     ffmpeg_target_os=linux
+     use_gles=yes
+     use_sdl=no
+     use_x11=no
+     use_wayland=no
+     use_pulse=no
+     use_joystick=no
+     use_optical_drive=no
+     USE_STATIC_FFMPEG=1
+     USE_V3D=1
+     AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+     ;;
 esac
 
 if test "$host_vendor" = "apple"; then
@@ -1006,6 +1024,9 @@ if test "$use_gles" = "yes"; then
       AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
       LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util"
     else
+      if test "$target_platform" = "target_v3d"; then
+        AC_CHECK_LIB([v3dplatform],[main],, AC_MSG_ERROR($missing_library))
+      fi
       AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
       AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
     fi
@@ -1106,6 +1127,9 @@ if test "$use_mysql" = "yes"; then
 fi
 AC_CHECK_LIB([bluetooth],   [hci_devid],, AC_MSG_RESULT([Could not find suitable version of libbluetooth]))
 
+# check if libatomic is available
+AC_CHECK_LIB([atomic], [__atomic_add_fetch_8], [LIBS="$LIBS -latomic"],)
+
 AC_LANG_PUSH([C++])
 PKG_CHECK_MODULES([TINYXML], [tinyxml >= 2.6.2],
   [INCLUDES="$INCLUDES $TINYXML_CFLAGS"; LIBS="$LIBS $TINYXML_LIBS"],
@@ -1122,7 +1146,7 @@ int main() {
   )])
 AC_LANG_POP([C++])
 
-if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
+if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android" || test "${target_platform}" = "target_v3d"; then
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
 fi
 
@@ -1652,7 +1676,21 @@ if test "${USE_STATIC_FFMPEG}" = "1"; then
       pkg_cfg_prefix=${SYSROOT}
   fi
 
-  if test "$cross_compiling" != "yes"; then
+  if test "$target_platform" = "target_v3d"; then
+    # always build our ffmpeg
+    if test "$use_debug" != "yes"; then
+      FFMPEG_OPTS="-r"
+    fi
+    if test "$use_optimizations" != "yes"; then
+      FFMPEG_OPTS="${FFMPEG_OPTS} --disable-optimizations"
+    fi
+    AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+      AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+      ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS} ${PARALLEL_MAKE} --arch=mips
+    export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+
+  elif test "$cross_compiling" != "yes"; then
     if test "$use_debug" != "yes"; then
       FFMPEG_OPTS="-r"
     fi
@@ -1685,14 +1723,18 @@ if test "${USE_STATIC_FFMPEG}" = "1"; then
       if test "$with_ffmpeg" = "yes" || test "$FFMPEG_FOUND" = "false"; then
         # ffmpeg not found with pkg-config, lets install it
         AC_MSG_NOTICE("Installing FFmpeg")
-        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
+        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+          AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+          ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
         export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
       fi
 
     elif test "$with_ffmpeg" = "force"; then
       # always build our ffmpeg
       AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
-      CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
+      CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+        AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+        ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
       export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
 
     elif test "$with_ffmpeg" != "no"; then
@@ -1705,13 +1747,17 @@ fi
 
 if test "$FFMPEG_FOUND" != "true"; then
   PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
-    [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"], 
+    [FFMPEG_FOUND="true"],
     [AC_MSG_ERROR("ffmpeg not found")])
+  FFMPEG_LIBS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --libs libavcodec 2>/dev/null)
+  FFMPEG_CFLAGS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --cflags libavcodec 2>/dev/null)
+  INCLUDES="$INCLUDES $FFMPEG_CFLAGS"
+  LIBS="$LIBS $FFMPEG_LIBS"
 fi
 
 if test "${USE_STATIC_FFMPEG}" = "1"; then
   # get the libdir for static linking
-  FFMPEG_LIBDIR=${pkg_cfg_prefix}$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
+  FFMPEG_LIBDIR=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
   GNUTLS_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors gnutls)
   VORBISENC_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors vorbisenc)
   DCADEC_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors dcadec)
@@ -2535,6 +2581,7 @@ AC_SUBST(USE_SSE4)
 AC_SUBST(USE_MMAL)
 AC_SUBST(USE_X11)
 AC_SUBST(USE_BREAKPAD)
+AC_SUBST(USE_V3D)
 
 # pushd and popd are not available in other shells besides bash, so implement
 # our own pushd/popd functions
diff --git a/m4/xbmc_arch.m4 b/m4/xbmc_arch.m4
index 0b66a82..446ec27 100644
--- a/m4/xbmc_arch.m4
+++ b/m4/xbmc_arch.m4
@@ -81,5 +81,8 @@ case $use_platform in
   raspberry-pi)
      AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
      ;;
+  v3d)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D")
+     ;;
 esac
 ])
diff --git a/system/playercorefactory.xml b/system/playercorefactory.xml
index df0e42f..87cee58 100644
--- a/system/playercorefactory.xml
+++ b/system/playercorefactory.xml
@@ -8,8 +8,20 @@
     <player name="DVDPlayer" /> placeholder for MPlayer
     <player name="PAPlayer" audio="true" />
     -->
+    <player name="E2Player" type="ExternalPlayer" audio="false" video="true">
+      <filename>kodiext</filename>
+      <args>-U "{1}" -S "{3}" -P "$PPID"</args>
+      <filenamemeta>/tmp/kodiextin.json</filenamemeta>
+      <hidexbmc>true</hidexbmc>
+      <hideconsole>true</hideconsole>
+      <warpcursor>none</warpcursor>
+    </player>
   </players>
 
+  <rules action="prepend">
+    <rule video="true" player="E2Player" />
+  </rules>
+
   <rules name="system rules">
     <rule name="mms/udp" protocols="mms|mmsh|udp" player="DVDPlayer" />
     <rule name="lastfm/shout" protocols="lastfm|shout" player="PAPlayer" />
diff --git a/tools/Linux/kodi.sh.in b/tools/Linux/kodi.sh.in
index 9e25f45..4d36920 100644
--- a/tools/Linux/kodi.sh.in
+++ b/tools/Linux/kodi.sh.in
@@ -25,9 +25,29 @@ prefix="@prefix@"
 exec_prefix="@exec_prefix@"
 datarootdir="@datarootdir@"
 LIBDIR="@libdir@"
-CRASHLOG_DIR=${CRASHLOG_DIR:-$HOME}
-USERDATA_DIR="${HOME}/.${bin_name}"
 
+export KODI_TEMP="/tmp/kodi"
+CRASHLOG_DIR=${CRASHLOG_DIR:-$KODI_TEMP}
+
+check_media_hdd() {
+    [ -e /proc/mounts ] || return 0
+
+    exec 9<&0 < /proc/mounts
+    while read DEV MTPT REST; do
+        case $DEV in
+            /dev/sd[a-z][0-9])
+            if [ "$MTPT" == "/media/hdd" ]; then
+                export HOME="$MTPT"
+                break
+            fi
+            ;;
+        esac
+    done
+    exec 0<&9 9<&-
+}
+
+check_media_hdd
+USERDATA_DIR="${HOME}/.${bin_name}"
 
 # Check for some options used by this script
 while [ "$#" -gt "0" ]
@@ -155,13 +175,13 @@ do
   LOOP=0
   "$LIBDIR/${bin_name}/${bin_name}.bin" $SAVED_ARGS
   RET=$?
-  if [ $(( $RET == 65 )) = "1" ]
-  then # User requested to restart app
-    LOOP=1
-  elif [ $(( ($RET >= 131 && $RET <= 136) || $RET == 139 )) = "1" ]
-  then # Crashed with core dump
-    print_crash_report
-  fi
+#  if [ $(( $RET == 65 )) = "1" ]
+#  then # User requested to restart app
+#    LOOP=1
+#  elif [ $(( ($RET >= 131 && $RET <= 136) || $RET == 139 )) = "1" ]
+#  then # Crashed with core dump
+#    print_crash_report
+#  fi
 done
 
 exit $RET
diff --git a/tools/depends/target/ffmpeg/autobuild.sh b/tools/depends/target/ffmpeg/autobuild.sh
index b9bfd57..7565ef4 100755
--- a/tools/depends/target/ffmpeg/autobuild.sh
+++ b/tools/depends/target/ffmpeg/autobuild.sh
@@ -127,6 +127,20 @@ tar --strip-components=1 -xf ../${ARCHIVE}
 
 CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
 ./configure --prefix=$FFMPEG_PREFIX \
+	--bindir="$FFMPEG_PREFIX/bin" \
+	--libdir="$FFMPEG_PREFIX/lib" \
+	--incdir="$FFMPEG_PREFIX/include" \
+	--pkgconfigdir="$FFMPEG_PREFIX/lib/pkgconfig" \
+	--target-os=linux \
+	--enable-cross-compile \
+	--nm="$NM" \
+	--ar="$AR" \
+	--as="$AS" \
+	--strip="$STRIP" \
+	--cc="$CC" \
+	--cxx="$CXX" \
+	--ld="$CCLD" \
+	--ranlib="$RANLIB" \
 	--extra-version="kodi-${VERSION}" \
 	--disable-devices \
 	--disable-ffplay \
diff --git a/xbmc/GUIInfoManager.cpp b/xbmc/GUIInfoManager.cpp
index c8bcd30..1205fd0 100644
--- a/xbmc/GUIInfoManager.cpp
+++ b/xbmc/GUIInfoManager.cpp
@@ -4711,8 +4711,12 @@ std::string CGUIInfoManager::GetSystemHeatInfo(int info)
     m_lastSysHeatInfoTime = CTimeUtils::GetFrameTime();
 #if defined(TARGET_POSIX)
     g_cpuInfo.getTemperature(m_cpuTemp);
+#if defined(TARGET_V3D)
+    m_gpuTemp = m_cpuTemp;
+#else
     m_gpuTemp = GetGPUTemperature();
 #endif
+#endif
   }
 
   std::string text;
diff --git a/xbmc/input/InputManager.cpp b/xbmc/input/InputManager.cpp
index 1e21e7b..546da07 100644
--- a/xbmc/input/InputManager.cpp
+++ b/xbmc/input/InputManager.cpp
@@ -620,6 +620,18 @@ bool CInputManager::OnKey(const CKey& key)
           useKeyboard = true;
       }
     }
+#if defined(TARGET_V3D)
+    switch(key.GetVKey()) {
+      case 0x0d:
+      case 0x80:
+      case 0x81:
+      case 0x82:
+      case 0x83:
+        if (iWin == WINDOW_DIALOG_KEYBOARD)
+          useKeyboard = false;
+        break;
+    }
+#endif
     if (useKeyboard)
     {
       // use the virtualkeyboard section of the keymap, and send keyboard-specific or navigation
diff --git a/xbmc/input/linux/LinuxInputDevices.cpp b/xbmc/input/linux/LinuxInputDevices.cpp
index 9f3e866..ac12d57 100644
--- a/xbmc/input/linux/LinuxInputDevices.cpp
+++ b/xbmc/input/linux/LinuxInputDevices.cpp
@@ -27,6 +27,8 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
+#define VKEY_ENABLE (0)
+
 #include "system.h"
 #if defined(HAS_LINUX_EVENTS)
 
@@ -273,6 +275,10 @@ KeyMap keyMap[] = {
   { 378               , XBMCK_RIGHT       }, // Green
   { 381               , XBMCK_UP          }, // Yellow
   { 366               , XBMCK_DOWN        }, // Blue
+#if defined(TARGET_V3D)
+  { KEY_OK            , XBMCK_RETURN      }, // Ok
+  { KEY_EXIT          , XBMCK_ESCAPE      }, // EXIT
+#endif
 };
 
 typedef enum
@@ -550,9 +556,17 @@ bool CLinuxInputDevice::KeyEvent(const struct input_event& levt, XBMC_Event& dev
 
     KeymapEntry entry;
     entry.code = code;
+
+    int keyMapValue;
+#if defined(TARGET_V3D)
+    if (devt.key.keysym.mod & (XBMCKMOD_SHIFT | XBMCKMOD_CAPS)) keyMapValue = entry.shift;
+    else if (devt.key.keysym.mod & XBMCKMOD_ALT) keyMapValue = entry.alt;
+    else if (devt.key.keysym.mod & XBMCKMOD_META) keyMapValue = entry.altShift;
+    else keyMapValue = entry.base;
+    devt.key.keysym.unicode = devt.key.keysym.sym;
+#else
     if (GetKeymapEntry(entry))
     {
-      int keyMapValue;
       if (devt.key.keysym.mod & (XBMCKMOD_SHIFT | XBMCKMOD_CAPS)) keyMapValue = entry.shift;
       else if (devt.key.keysym.mod & XBMCKMOD_ALT) keyMapValue = entry.alt;
       else if (devt.key.keysym.mod & XBMCKMOD_META) keyMapValue = entry.altShift;
@@ -567,6 +581,7 @@ bool CLinuxInputDevice::KeyEvent(const struct input_event& levt, XBMC_Event& dev
         }
       }
     }
+#endif
   }
 
   return true;
@@ -855,6 +870,12 @@ XBMC_Event CLinuxInputDevice::ReadEvent()
         break;
       }
 
+#if defined(TARGET_V3D)
+      if (access("/tmp/playing.lock", F_OK) == 0) {
+        break;
+      }
+#endif
+
       //printf("read event readlen = %d device name %s m_fileName %s\n", readlen, m_deviceName, m_fileName.c_str());
 
       // sanity check if we realy read the event
@@ -1094,6 +1115,7 @@ bool CLinuxInputDevices::CheckDevice(const char *device)
   if (fd < 0)
     return false;
 
+#if !defined(TARGET_V3D)
   if (ioctl(fd, EVIOCGRAB, 1) && errno != EINVAL)
   {
     close(fd);
@@ -1101,6 +1123,7 @@ bool CLinuxInputDevices::CheckDevice(const char *device)
   }
 
   ioctl(fd, EVIOCGRAB, 0);
+#endif
 
   close(fd);
 
@@ -1193,6 +1216,7 @@ bool CLinuxInputDevice::Open()
     return false;
   }
 
+#if !defined(TARGET_V3D)
   /* grab device */
   ret = ioctl(fd, EVIOCGRAB, 1);
   if (ret && errno != EINVAL)
@@ -1201,6 +1225,7 @@ bool CLinuxInputDevice::Open()
     close(fd);
     return false;
   }
+#endif
 
   // Set the socket to non-blocking
   int opts = 0;
@@ -1267,8 +1292,9 @@ bool CLinuxInputDevice::Open()
   return true;
 
 driver_open_device_error:
-
+#if !defined(TARGET_V3D)
   ioctl(fd, EVIOCGRAB, 0);
+#endif
   if (m_vt_fd >= 0)
   {
     close(m_vt_fd);
@@ -1342,9 +1368,10 @@ bool CLinuxInputDevice::GetKeymapEntry(KeymapEntry& entry)
  */
 void CLinuxInputDevice::Close()
 {
+#if !defined(TARGET_V3D)
   /* release device */
   ioctl(m_fd, EVIOCGRAB, 0);
-
+#endif
   if (m_vt_fd >= 0)
     close(m_vt_fd);
 
diff --git a/xbmc/utils/CPUInfo.cpp b/xbmc/utils/CPUInfo.cpp
index f1d07dd..14b175b 100644
--- a/xbmc/utils/CPUInfo.cpp
+++ b/xbmc/utils/CPUInfo.cpp
@@ -410,6 +410,30 @@ CCPUInfo::CCPUInfo(void)
           }
         }
       }
+#ifdef TARGET_V3D
+      else if (strncmp(buffer, "system type", strlen("system type"))==0)
+      {
+        char *needle = strchr(buffer, ':');
+        if (needle && strlen(needle)>3)
+        {
+          needle+=2;
+          m_cpuModel = needle;
+          StringUtils::Trim(m_cpuModel);
+          StringUtils::ToUpper(m_cpuModel);
+          m_cpuModel.insert(0, "Broadcom ");
+        }
+      }
+      else if (strncmp(buffer, "cpu model", strlen("cpu model"))==0)
+      {
+        char *needle = strchr(buffer, ':');
+        if (needle && strlen(needle)>3)
+        {
+          needle+=2;
+          m_cores[nCurrId].m_strModel = needle;
+          StringUtils::Trim(m_cores[nCurrId].m_strModel);
+        }
+      }
+#endif
     }
     fclose(fCPUInfo);
     //  /proc/cpuinfo is not reliable on some Android platforms
@@ -584,6 +608,15 @@ bool CCPUInfo::getTemperature(CTemperature& temperature)
 #if defined(TARGET_DARWIN_OSX)
   value = SMCGetTemperature(SMC_KEY_CPU_TEMP);
   scale = 'c';
+#elif defined(TARGET_V3D)
+  value = 0;
+  scale = 'c';
+  FILE        *p    = fopen("/proc/stb/fp/temp_sensor_avs", "r");
+  if (p)
+  {
+    fscanf(p, "%d", &value);
+    fclose(p);
+  }
 #else
   int         ret   = 0;
   FILE        *p    = NULL;
diff --git a/xbmc/windowing/egl/EGLNativeTypeV3D.cpp b/xbmc/windowing/egl/EGLNativeTypeV3D.cpp
new file mode 100644
index 0000000..c42eadd
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeV3D.cpp
@@ -0,0 +1,161 @@
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "system.h"
+#include "EGLNativeTypeV3D.h"
+#include "utils/StringUtils.h"
+#include "utils/log.h"
+#include "guilib/gui3d.h"
+#include "linux/DllBCM.h"
+#include <v3dplatform.h>
+
+extern V3D_PlatformHandle g_v3dPlatformHandle;
+
+using namespace std;
+
+bool CEGLNativeTypeV3D::CheckCompatibility()
+{
+  return true;
+}
+
+void CEGLNativeTypeV3D::Initialize()
+{
+}
+
+void CEGLNativeTypeV3D::Destroy()
+{
+}
+
+bool CEGLNativeTypeV3D::CreateNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeV3D::CreateNativeWindow()
+{
+  V3D_NativeWindowInfo info;
+  m_nativeWindow = V3D_CreateNativeWindow(&info);
+  if (!m_nativeWindow) {
+    return false;
+  }
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeWindow(XBNativeDisplayType **nativeWindow) const
+{
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeV3D::DestroyNativeWindow()
+{
+  V3D_DestroyNativeWindow(m_nativeWindow);
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopRes;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  m_desktopRes = res;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  resolutions.clear();
+
+  m_desktopResAll[0].iScreen      = 0;
+  m_desktopResAll[0].bFullScreen  = true;
+  m_desktopResAll[0].iWidth       = 1280;
+  m_desktopResAll[0].iHeight      = 720;
+  m_desktopResAll[0].iScreenWidth = 1280;
+  m_desktopResAll[0].iScreenHeight= 720;
+  m_desktopResAll[0].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE;
+  m_desktopResAll[0].fRefreshRate = 50;
+  m_desktopResAll[0].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[0].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen", m_desktopRes.strMode.c_str(), 50., "");
+  m_desktopResAll[0].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[0].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[0].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[0]);
+
+  m_desktopResAll[1].iScreen      = 0;
+  m_desktopResAll[1].bFullScreen  = true;
+  m_desktopResAll[1].iWidth       = 1280;
+  m_desktopResAll[1].iHeight      = 720;
+  m_desktopResAll[1].iScreenWidth = 1280;
+  m_desktopResAll[1].iScreenHeight= 720;
+  m_desktopResAll[1].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DSBS;
+  m_desktopResAll[1].fRefreshRate = 50;
+  m_desktopResAll[1].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[1].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DSBS", m_desktopResAll[1].strMode.c_str(), 50., "");
+  m_desktopResAll[1].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[1].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[1].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[1]);
+
+  m_desktopResAll[2].iScreen      = 0;
+  m_desktopResAll[2].bFullScreen  = true;
+  m_desktopResAll[2].iWidth       = 1280;
+  m_desktopResAll[2].iHeight      = 720;
+  m_desktopResAll[2].iScreenWidth = 1280;
+  m_desktopResAll[2].iScreenHeight= 720;
+  m_desktopResAll[2].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DTB;
+  m_desktopResAll[2].fRefreshRate = 50;
+  m_desktopResAll[2].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[2].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DTB", m_desktopResAll[2].strMode.c_str(), 50., "");
+  m_desktopResAll[2].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[2].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[2].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[2]);
+
+  m_desktopRes = m_desktopResAll[0];
+
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopResAll[0];
+  return true;
+}
+
+bool CEGLNativeTypeV3D::ShowWindow(bool show)
+{
+  return V3D_SetVisible(g_v3dPlatformHandle, show);
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeV3D.h b/xbmc/windowing/egl/EGLNativeTypeV3D.h
new file mode 100644
index 0000000..2dfee7b
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeV3D.h
@@ -0,0 +1,59 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeType.h"
+
+#include <vector>
+#include <string>
+
+class CEGLNativeTypeV3D : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeV3D() {
+    m_nativeDisplay = 0;
+    m_nativeWindow = 0;
+  }
+  virtual ~CEGLNativeTypeV3D() {};
+  virtual std::string GetNativeName() const { return "V3D"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+private:
+  RESOLUTION_INFO m_desktopRes;
+  RESOLUTION_INFO m_desktopResAll[3];
+};
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 036d4b9..6dd2de8 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -36,6 +36,9 @@
 #if defined(HAS_IMXVPU)
   #include "EGLNativeTypeIMX.h"
 #endif
+#if defined(TARGET_V3D)
+  #include "EGLNativeTypeV3D.h"
+#endif
 #include "EGLNativeTypeAmlogic.h"
 #include "EGLWrapper.h"
 
@@ -105,6 +108,9 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
 #if defined(HAS_IMXVPU)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation)) ||
 #endif
+#if defined(TARGET_V3D)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation)) ||
+#endif
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
       )
   {
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
index 32fb168..bbd312b 100644
--- a/xbmc/windowing/egl/Makefile.in
+++ b/xbmc/windowing/egl/Makefile.in
@@ -13,6 +13,9 @@ endif
 ifeq (@USE_IMXVPU@,1)
 SRCS+= EGLNativeTypeIMX.cpp
 endif
+ifeq (@USE_V3D@,1)
+SRCS+= EGLNativeTypeV3D.cpp
+endif
 SRCS+= EGLWrapper.cpp
 
 # Wayland specific detail
diff --git a/xbmc/xbmc.cpp b/xbmc/xbmc.cpp
index 366e4b5..fc59749 100644
--- a/xbmc/xbmc.cpp
+++ b/xbmc/xbmc.cpp
@@ -40,6 +40,11 @@
 #include "main/posix/MessagePrinter.h"
 #endif
 
+#if defined(TARGET_V3D)
+#include <v3dplatform.h>
+V3D_PlatformHandle g_v3dPlatformHandle;
+#endif
+
 extern "C" int XBMC_Run(bool renderGUI)
 {
   int status = -1;
@@ -74,6 +79,10 @@ extern "C" int XBMC_Run(bool renderGUI)
                                        -1);
 #endif
 
+#if defined(TARGET_V3D)
+  V3D_RegisterDisplayPlatform(&g_v3dPlatformHandle, NULL);
+#endif
+
 #ifdef TARGET_RASPBERRY_PI
   if(!g_RBP.Initialize())
     return false;
-- 
1.9.1

